Peer Review Assignment
Coursera Course: SQL for Data Science

*****1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 (Unique/DISTINCT - 1115)

SELECT 
	COUNT(*) as Total_Count
FROM attribute;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

ii. Business table = 10000

SELECT 
	COUNT(*) as Total_Count
FROM business;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

iii. Category table = 10000

SELECT 
	COUNT(*) as Total_Count
FROM category;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

iv. Checkin table = 10000

SELECT 
	COUNT(*) as Total_Count
FROM checkin;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

v. elite_years table = 10000

SELECT 
	COUNT(*) as Total_Count
FROM elite_years;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

vi. friend table = 10000

SELECT 
	COUNT(*) as Total_Count
FROM friend;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

vii. hours table = 10000

SELECT 
	COUNT(*) as Total_Count
FROM hours;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

viii. photo table = 10000

SELECT 
	COUNT(*) as Total_Count
FROM photo;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

ix. review table = 10000

SELECT 
	COUNT(*) as Total_Count
FROM review;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

x. tip table = 10000

SELECT 
	COUNT(*) as Total_Count
FROM tip;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

xi. user table = 10000

SELECT 
	COUNT(*) as Total_Count
FROM user;

+-------------+
| Total_Count |
+-------------+
|       10000 |
+-------------+

***** 2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (Key: id)

SELECT 
	COUNT(DISTINCT id) as Distinct_Total_Count
FROM business;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                10000 |
+----------------------+

ii. Hours = 1562 (Key: business_id)

SELECT 
	COUNT(DISTINCT business_id) as Distinct_Total_Count
FROM hours;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                 1562 |
+----------------------+

iii. Category = 2643 (Key: business_id)

SELECT 
	COUNT(DISTINCT business_id) as Distinct_Total_Count
FROM category;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                 2643 |
+----------------------+

iv. Attribute = 1115  (Key: business_id)

SELECT 
	COUNT(DISTINCT business_id) as Distinct_Total_Count
FROM attribute;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                 1115 |
+----------------------+

v. Review

Key: business_id - 8090

SELECT 
	COUNT(DISTINCT business_id) as Distinct_Total_Count
FROM review;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                 8090 |
+----------------------+

Key: id - 10000

SELECT 
	COUNT(DISTINCT id) as Distinct_Total_Count
FROM review;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                10000 |
+----------------------+

Key: user_id - 9581

SELECT 
	COUNT(DISTINCT user_id) as Distinct_Total_Count
FROM review;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                 9581 |
+----------------------+

vi. Checkin

Key: business_id - 493

SELECT 
	COUNT(DISTINCT business_id) as Distinct_Total_Count
FROM checkin;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                  493 |
+----------------------+

vii. Photo

Key: id - 10000

SELECT 
	COUNT(DISTINCT id) as Distinct_Total_Count
FROM photo;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                10000 |
+----------------------+

Key: business_id - 6493

SELECT 
	COUNT(DISTINCT business_id) as Distinct_Total_Count
FROM photo;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                 6493 |
+----------------------+

viii. Tip

Key: business_id - 3979

SELECT 
	COUNT(DISTINCT business_id) as Distinct_Total_Count
FROM tip;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                 3979 |
+----------------------+

Key: user_id - 537

SELECT 
	COUNT(DISTINCT user_id) as Distinct_Total_Count
FROM tip;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                  537 |
+----------------------+

ix. User

Key: id - 10000

SELECT 
	COUNT(DISTINCT id) as Distinct_Total_Count
FROM user;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                10000 |
+----------------------+

x. Friend

Key: user_id - 11

SELECT 
	COUNT(DISTINCT user_id) as Distinct_Total_Count
FROM tip;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                   11 |
+----------------------+

xi. Elite_years

Key: user_id - 2780

SELECT 
	COUNT(DISTINCT user_id) as Distinct_Total_Count
FROM elite_years;

+----------------------+
| Distinct_Total_Count |
+----------------------+
|                 2780 |
+----------------------+

*****3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	SQL code used to arrive at answer:

SELECT *
FROM user
WHERE 
    id IS NULL OR
    name IS NULL OR
    review_count IS NULL OR
    yelping_since IS NULL OR
    useful IS NULL OR
	funny IS NULL OR
	cool IS NULL OR
	fans IS NULL OR
	average_stars IS NULL OR
	compliment_hot IS NULL OR
	compliment_more IS NULL OR
	compliment_profile IS NULL OR
	compliment_cute IS NULL OR
	compliment_list IS NULL OR
	compliment_note IS NULL OR
	compliment_plain IS NULL OR
	compliment_cool IS NULL OR
	compliment_funny IS NULL OR
	compliment_writer IS NULL OR
	compliment_photos IS NULL;

*****4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
		SELECT 
			MIN(stars) as Min_Stars,
			MAX(stars) as Max_Stars,
			AVG(stars) as Avg_Stars
		FROM review;

		+-----------+-----------+-----------+
		| Min_Stars | Max_Stars | Avg_Stars |
		+-----------+-----------+-----------+
		|         1 |         5 |    3.7082 |
		+-----------+-----------+-----------+
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
	
		SELECT 
			MIN(stars) as Min_Stars,
			MAX(stars) as Max_Stars,
			AVG(stars) as Avg_Stars
		FROM business;

	
		+-----------+-----------+-----------+
		| Min_Stars | Max_Stars | Avg_Stars |
		+-----------+-----------+-----------+
		|       1.0 |       5.0 |    3.6549 |
		+-----------+-----------+-----------+
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
		SELECT 
			MIN(likes) as Min_Likes,
			MAX(likes) as Max_Likes,
			AVG(likes) as Avg_Likes
		FROM tip;
	
		+-----------+-----------+-----------+
		| Min_Likes | Max_Likes | Avg_Likes |
		+-----------+-----------+-----------+
		|         0 |         2 |    0.0144 |
		+-----------+-----------+-----------+
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
		SELECT 
			MIN(count) as Min_Count,
			MAX(count) as Max_Count,
			AVG(count) as Avg_Count
		FROM checkin;
		
		+-----------+-----------+-----------+
		| Min_Count | Max_Count | Avg_Count |
		+-----------+-----------+-----------+
		|         1 |        53 |    1.9414 |
		+-----------+-----------+-----------+
	
	v. Table: User, Column: Review_count
	
		min:		max:		avg:
		
		SELECT 
			MIN(review_count) as Min_ReviewCount,
			MAX(review_count) as Max_ReviewCount,
			AVG(review_count) as Avg_ReviewCount
		FROM user;

		+-----------------+-----------------+-----------------+
		| Min_ReviewCount | Max_ReviewCount | Avg_ReviewCount |
		+-----------------+-----------------+-----------------+
		|               0 |            2000 |         24.2995 |
		+-----------------+-----------------+-----------------+
		

*****5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT 
		city, 
		COUNT(review_count) as Total_Review_Count
	FROM business
	GROUP BY city
	ORDER BY Total_Review_Count DESC;
	
	Copy and Paste the Result Below:
	
	+-----------------+--------------------+
	| city            | Total_Review_Count |
	+-----------------+--------------------+
	| Las Vegas       |               1561 |
	| Phoenix         |               1001 |
	| Toronto         |                985 |
	| Scottsdale      |                497 |
	| Charlotte       |                468 |
	| Pittsburgh      |                353 |
	| Montr√©al        |                337 |
	| Mesa            |                304 |
	| Henderson       |                274 |
	| Tempe           |                261 |
	| Edinburgh       |                239 |
	| Chandler        |                232 |
	| Cleveland       |                189 |
	| Gilbert         |                188 |
	| Glendale        |                188 |
	| Madison         |                176 |
	| Mississauga     |                150 |
	| Stuttgart       |                141 |
	| Peoria          |                105 |
	| Markham         |                 80 |
	| Champaign       |                 71 |
	| North Las Vegas |                 70 |
	| North York      |                 64 |
	| Surprise        |                 60 |
	| Richmond Hill   |                 54 |
	+-----------------+--------------------+
	(Output limit exceeded, 25 of 362 total rows shown)
	
*****6. Find the distribution of star ratings to the business in the following cities:

	i. Avon

	SQL code used to arrive at answer:

		SELECT
			stars as StarRating,
			COUNT(stars) as Count
		FROM business
		WHERE city = 'Avon'
		GROUP BY stars;

	Copy and Paste the Resulting Table Below (2 columns √¢‚Ç¨‚Äú star rating and count):
	
		+------------+-------+
		| StarRating | Count |
		+------------+-------+
		|        1.5 |     1 |
		|        2.5 |     2 |
		|        3.5 |     3 |
		|        4.0 |     2 |
		|        4.5 |     1 |
		|        5.0 |     1 |
		+------------+-------+

	ii. Beachwood

	SQL code used to arrive at answer:

		SELECT
			stars as StarRating,
			COUNT(stars) as Count
		FROM business
		WHERE city = 'Beachwood'
		GROUP BY stars;

	Copy and Paste the Resulting Table Below (2 columns √¢‚Ç¨‚Äú star rating and count):

		+------------+-------+
		| StarRating | Count |
		+------------+-------+
		|        2.0 |     1 |
		|        2.5 |     1 |
		|        3.0 |     2 |
		|        3.5 |     2 |
		|        4.0 |     1 |
		|        4.5 |     2 |
		|        5.0 |     5 |
		+------------+-------+
		
*****7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
		SELECT
			name,
			review_count
		FROM user
		GROUP BY name
		ORDER BY review_count DESC
		LIMIT 3;

		
	Copy and Paste the Result Below:
		
		+--------+--------------+
		| name   | review_count |
		+--------+--------------+
		| Gerald |         2000 |
		| .Hon   |         1246 |
		| eric   |         1116 |
		+--------+--------------+

*****8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
		
		Looking at the data review_count vs fans, there's no significant correlation between the 2 sets of numbers. It means that posting more reviews would mean a high number of fans.
		I extracted the table below and checked for correlation coeifficient. This resulted to a 0.29 which means it would be described as a weak positive association yet statistically significant.
		
	SQL Query and Result:
	
	SELECT
		id,
		name,
		review_count,
		fans
	from user
	GROUP BY id
	ORDER BY review_count DESC;
	
	+------------------------+-----------+--------------+------+
	| id                     | name      | review_count | fans |
	+------------------------+-----------+--------------+------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara      |         1629 |   50 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 |
	| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 |
	| -gokwePdbXjfS0iF7NsUGA | eric      |         1116 |   16 |
	| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 |
	| -fUARDNuXAfrOn4WLSZLgA | Ed        |          904 |   38 |
	| -hKniZN2OdshWLHYuj21jQ | Nicole    |          864 |   43 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 |
	| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 |
	| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 |
	| -kO6984fXByyZm3_6z2JYg | Dominic   |          836 |   37 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 |
	| -l9giG8TSDBG1jnUBUXp5w | Alison    |          775 |   61 |
	| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 |
	| -AaBjWJYiQxXkCMDlXfPGw | Tim       |          702 |   35 |
	| -jt1ACMiZljnBFvS6RRvnA | L         |          696 |   10 |
	| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 |
	| -hxUwfo3cMnLTv-CAaP69A | Crissy    |          676 |   25 |
	| -H6cTbVxeIRYR-atxdielQ | Lyn       |          675 |   45 |
	+------------------------+-----------+--------------+------+
	
*****9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Based on the extracted data from reviews, there are more "love" words versus "hate".
	
	SQL code used to arrive at answer:	
	
		SELECT
			COUNT(text) as Text_Love
		FROM review
		WHERE text LIKE '%love%';
		
		+-----------+
		| Text_Love |
		+-----------+
		|      1780 |
		+-----------+
		
		SELECT
			COUNT(text) as Text_Hate
		FROM review
		WHERE text LIKE '%hate%';
		
		+-----------+
		| Text_Hate |
		+-----------+
		|       232 |
		+-----------+

*****10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
		SELECT
			name,
			fans
		FROM user
		ORDER BY fans DESC
		LIMIT 10;
	
	Copy and Paste the Result Below:

		+-----------+------+
		| name      | fans |
		+-----------+------+
		| Amy       |  503 |
		| Mimi      |  497 |
		| Harald    |  311 |
		| Gerald    |  253 |
		| Christine |  173 |
		| Lisa      |  159 |
		| Cat       |  133 |
		| William   |  126 |
		| Fran      |  124 |
		| Lissa     |  120 |
		+-----------+------+
		
	
